// Generated by https://quicktype.io

namespace OAconsole
{
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    internal class ProductPlatformIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductPlatformId) || t == typeof(ProductPlatformId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "BA2SH2")
            {
                return ProductPlatformId.Ba2Sh2;
            }
            throw new Exception("Cannot unmarshal type ProductPlatformId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductPlatformId)untypedValue;
            if (value == ProductPlatformId.Ba2Sh2)
            {
                serializer.Serialize(writer, "BA2SH2");
                return;
            }
            throw new Exception("Cannot marshal type ProductPlatformId");
        }

        public static readonly ProductPlatformIdConverter Singleton = new ProductPlatformIdConverter();
    }
}
