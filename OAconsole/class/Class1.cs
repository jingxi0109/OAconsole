// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Creator
    {
        [JsonProperty("user_name")]
        public RName UserName { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }
    }

    public enum RName { 陈敬熙 };

    public enum Notes { Empty, 泰硕酷冷可选默认包含散热片底座 };

    public enum PartCode { Cdrcscxxxxxsvr0001, Ctngen089506750250, NA, Snktsl2Ubp20110001, Snktsl2Ubp36470001 };

    public enum PartName { SocketSp33647Pin2U被动散热片, The2011Pin2U被动散热片, The2U8盘12盘服务器包装, 服务器NrE费用, 服务器随机光盘 };

    public enum PartTypeName { N01服务器Nre, N04服务器散热片, N09服务器包装箱, N15服务器光盘 };

    public enum ProductPlatformId { Ia521, Ib521 };

    public enum SupplierModel { NA, 原包装, 泰硕, 泰硕1A07425700960, 自制 };

    public partial class Quotation
    {
        public static Quotation FromJson(string json) => JsonConvert.DeserializeObject<Quotation>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Quotation self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                RNameConverter.Singleton,
                NotesConverter.Singleton,
                PartCodeConverter.Singleton,
                PartNameConverter.Singleton,
                PartTypeNameConverter.Singleton,
                ProductPlatformIdConverter.Singleton,
                SupplierModelConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RName) || t == typeof(RName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "陈敬熙")
            {
                return RName.陈敬熙;
            }
            throw new Exception("Cannot unmarshal type RName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RName)untypedValue;
            if (value == RName.陈敬熙)
            {
                serializer.Serialize(writer, "陈敬熙");
                return;
            }
            throw new Exception("Cannot marshal type RName");
        }

        public static readonly RNameConverter Singleton = new RNameConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NotesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Notes) || t == typeof(Notes?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Notes.Empty;
                case "泰硕、酷冷可选；\n默认包含散热片底座；":
                    return Notes.泰硕酷冷可选默认包含散热片底座;
            }
            throw new Exception("Cannot unmarshal type Notes");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Notes)untypedValue;
            switch (value)
            {
                case Notes.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Notes.泰硕酷冷可选默认包含散热片底座:
                    serializer.Serialize(writer, "泰硕、酷冷可选；\n默认包含散热片底座；");
                    return;
            }
            throw new Exception("Cannot marshal type Notes");
        }

        public static readonly NotesConverter Singleton = new NotesConverter();
    }

    internal class PartCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PartCode) || t == typeof(PartCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CDRCSCXXXXXSVR0001":
                    return PartCode.Cdrcscxxxxxsvr0001;
                case "CTNGEN089506750250":
                    return PartCode.Ctngen089506750250;
                case "N/A":
                    return PartCode.NA;
                case "SNKTSL2UBP20110001":
                    return PartCode.Snktsl2Ubp20110001;
                case "SNKTSL2UBP36470001":
                    return PartCode.Snktsl2Ubp36470001;
            }
            throw new Exception("Cannot unmarshal type PartCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PartCode)untypedValue;
            switch (value)
            {
                case PartCode.Cdrcscxxxxxsvr0001:
                    serializer.Serialize(writer, "CDRCSCXXXXXSVR0001");
                    return;
                case PartCode.Ctngen089506750250:
                    serializer.Serialize(writer, "CTNGEN089506750250");
                    return;
                case PartCode.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
                case PartCode.Snktsl2Ubp20110001:
                    serializer.Serialize(writer, "SNKTSL2UBP20110001");
                    return;
                case PartCode.Snktsl2Ubp36470001:
                    serializer.Serialize(writer, "SNKTSL2UBP36470001");
                    return;
            }
            throw new Exception("Cannot marshal type PartCode");
        }

        public static readonly PartCodeConverter Singleton = new PartCodeConverter();
    }

    internal class PartNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PartName) || t == typeof(PartName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "2011pin 2U被动散热片":
                    return PartName.The2011Pin2U被动散热片;
                case "2U 8盘/12盘服务器包装":
                    return PartName.The2U8盘12盘服务器包装;
                case "Socket SP3 3647pin 2U被动散热片":
                    return PartName.SocketSp33647Pin2U被动散热片;
                case "服务器NRE费用":
                    return PartName.服务器NrE费用;
                case "服务器随机光盘":
                    return PartName.服务器随机光盘;
            }
            throw new Exception("Cannot unmarshal type PartName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PartName)untypedValue;
            switch (value)
            {
                case PartName.The2011Pin2U被动散热片:
                    serializer.Serialize(writer, "2011pin 2U被动散热片");
                    return;
                case PartName.The2U8盘12盘服务器包装:
                    serializer.Serialize(writer, "2U 8盘/12盘服务器包装");
                    return;
                case PartName.SocketSp33647Pin2U被动散热片:
                    serializer.Serialize(writer, "Socket SP3 3647pin 2U被动散热片");
                    return;
                case PartName.服务器NrE费用:
                    serializer.Serialize(writer, "服务器NRE费用");
                    return;
                case PartName.服务器随机光盘:
                    serializer.Serialize(writer, "服务器随机光盘");
                    return;
            }
            throw new Exception("Cannot marshal type PartName");
        }

        public static readonly PartNameConverter Singleton = new PartNameConverter();
    }

    internal class PartTypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PartTypeName) || t == typeof(PartTypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "N01 服务器NRE":
                    return PartTypeName.N01服务器Nre;
                case "N04 服务器散热片":
                    return PartTypeName.N04服务器散热片;
                case "N09 服务器包装箱":
                    return PartTypeName.N09服务器包装箱;
                case "N15 服务器光盘":
                    return PartTypeName.N15服务器光盘;
            }
            throw new Exception("Cannot unmarshal type PartTypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PartTypeName)untypedValue;
            switch (value)
            {
                case PartTypeName.N01服务器Nre:
                    serializer.Serialize(writer, "N01 服务器NRE");
                    return;
                case PartTypeName.N04服务器散热片:
                    serializer.Serialize(writer, "N04 服务器散热片");
                    return;
                case PartTypeName.N09服务器包装箱:
                    serializer.Serialize(writer, "N09 服务器包装箱");
                    return;
                case PartTypeName.N15服务器光盘:
                    serializer.Serialize(writer, "N15 服务器光盘");
                    return;
            }
            throw new Exception("Cannot marshal type PartTypeName");
        }

        public static readonly PartTypeNameConverter Singleton = new PartTypeNameConverter();
    }

    internal class ProductPlatformIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductPlatformId) || t == typeof(ProductPlatformId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "IA521":
                    return ProductPlatformId.Ia521;
                case "IB521":
                    return ProductPlatformId.Ib521;
            }
            throw new Exception("Cannot unmarshal type ProductPlatformId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductPlatformId)untypedValue;
            switch (value)
            {
                case ProductPlatformId.Ia521:
                    serializer.Serialize(writer, "IA521");
                    return;
                case ProductPlatformId.Ib521:
                    serializer.Serialize(writer, "IB521");
                    return;
            }
            throw new Exception("Cannot marshal type ProductPlatformId");
        }

        public static readonly ProductPlatformIdConverter Singleton = new ProductPlatformIdConverter();
    }

    internal class SupplierModelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SupplierModel) || t == typeof(SupplierModel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "N/A":
                    return SupplierModel.NA;
                case "原包装":
                    return SupplierModel.原包装;
                case "泰硕":
                    return SupplierModel.泰硕;
                case "泰硕1A0-7425700960":
                    return SupplierModel.泰硕1A07425700960;
                case "自制":
                    return SupplierModel.自制;
            }
            throw new Exception("Cannot unmarshal type SupplierModel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SupplierModel)untypedValue;
            switch (value)
            {
                case SupplierModel.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
                case SupplierModel.原包装:
                    serializer.Serialize(writer, "原包装");
                    return;
                case SupplierModel.泰硕:
                    serializer.Serialize(writer, "泰硕");
                    return;
                case SupplierModel.泰硕1A07425700960:
                    serializer.Serialize(writer, "泰硕1A0-7425700960");
                    return;
                case SupplierModel.自制:
                    serializer.Serialize(writer, "自制");
                    return;
            }
            throw new Exception("Cannot marshal type SupplierModel");
        }

        public static readonly SupplierModelConverter Singleton = new SupplierModelConverter();
    }
}
