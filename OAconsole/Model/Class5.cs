// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QT_configlist;
//
//    var configlist = Configlist.FromJson(jsonString);

namespace QT_configlist
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Configlist
    {
        [JsonProperty("result")]
        public Result Result { get; set; }

        [JsonProperty("page_size")]
        public object PageSize { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("page_index")]
        public object PageIndex { get; set; }

        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("extra")]
        public Extra Extra { get; set; }

        [JsonProperty("resultType")]
        public string ResultType { get; set; }

        [JsonProperty("resultMessage")]
        public object ResultMessage { get; set; }

        [JsonProperty("sEcho")]
        public object SEcho { get; set; }
    }

    public partial class Extra
    {
        [JsonProperty("accepted_count")]
        public long AcceptedCount { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("lastIdInPreviousPage")]
        public long LastIdInPreviousPage { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("extra")]
        public Extra Extra { get; set; }

        [JsonProperty("serialVersionUID")]
        public double SerialVersionUid { get; set; }

        [JsonProperty("list")]
        public List<List> List { get; set; }

        [JsonProperty("sEcho")]
        public object SEcho { get; set; }
    }

    public partial class List
    {
        [JsonProperty("quotation_serial_number")]
        public string QuotationSerialNumber { get; set; }

        [JsonProperty("sn_code")]
        public object SnCode { get; set; }

        [JsonProperty("service_price_company")]
        public long ServicePriceCompany { get; set; }

        [JsonProperty("cal_from")]
        public string CalFrom { get; set; }

        [JsonProperty("work_order_code")]
        public object WorkOrderCode { get; set; }

        [JsonProperty("owner_name")]
        public string OwnerName { get; set; }

        [JsonProperty("product_id")]
        public long ProductId { get; set; }

        [JsonProperty("trial_test_id")]
        public object TrialTestId { get; set; }

        [JsonProperty("current_approval_user_name")]
        public string CurrentApprovalUserName { get; set; }

        [JsonProperty("unit_price")]
        public double UnitPrice { get; set; }

        [JsonProperty("quotation_current_approval_user_name")]
        public string QuotationCurrentApprovalUserName { get; set; }

        [JsonProperty("stock_approval_id")]
        public object StockApprovalId { get; set; }

        [JsonProperty("service_price_public")]
        public long ServicePricePublic { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("unit_price_material")]
        public long UnitPriceMaterial { get; set; }

        [JsonProperty("product_type_id")]
        public long ProductTypeId { get; set; }

        [JsonProperty("part_price_material")]
        public long PartPriceMaterial { get; set; }

        [JsonProperty("service_price_material")]
        public long ServicePriceMaterial { get; set; }

        [JsonProperty("discounted_total_price")]
        public double DiscountedTotalPrice { get; set; }

        [JsonProperty("unit_price_public")]
        public double UnitPricePublic { get; set; }

        [JsonProperty("opportunity_id")]
        public object OpportunityId { get; set; }

        [JsonProperty("discount_rate")]
        public long DiscountRate { get; set; }

        [JsonProperty("discounted_total_price_part")]
        public double DiscountedTotalPricePart { get; set; }

        [JsonProperty("trial_test_unit_price")]
        public object TrialTestUnitPrice { get; set; }

        [JsonProperty("stock_current_approval_user_name")]
        public string StockCurrentApprovalUserName { get; set; }

        [JsonProperty("product_platform_id")]
        public string ProductPlatformId { get; set; }

        [JsonProperty("approval_status")]
        public long ApprovalStatus { get; set; }

        [JsonProperty("product_config_name")]
        public string ProductConfigName { get; set; }

        [JsonProperty("approval_id")]
        public string ApprovalId { get; set; }

        [JsonProperty("total_price")]
        public double TotalPrice { get; set; }

        [JsonProperty("sale_status")]
        public long SaleStatus { get; set; }

        [JsonProperty("creator_id")]
        public long CreatorId { get; set; }

        [JsonProperty("product_type_name")]
        public string ProductTypeName { get; set; }

        [JsonProperty("update_time")]
        public DateTimeOffset UpdateTime { get; set; }

        [JsonProperty("unit_price_service")]
        public object UnitPriceService { get; set; }

        [JsonProperty("unit_price_company")]
        public double UnitPriceCompany { get; set; }

        [JsonProperty("stock_quantity")]
        public object StockQuantity { get; set; }

        [JsonProperty("product_notes")]
        public string ProductNotes { get; set; }

        [JsonProperty("approval_need_user_type")]
        public long ApprovalNeedUserType { get; set; }

        [JsonProperty("discounted_unit_price_part")]
        public double DiscountedUnitPricePart { get; set; }

        [JsonProperty("owner")]
        public Creator Owner { get; set; }

        [JsonProperty("create_time")]
        public DateTimeOffset CreateTime { get; set; }

        [JsonProperty("creator_name")]
        public string  CreatorName { get; set; }

        [JsonProperty("trial_test_total_price")]
        public object TrialTestTotalPrice { get; set; }

        [JsonProperty("special_requirement_id")]
        public object SpecialRequirementId { get; set; }

        [JsonProperty("quotation_id")]
        public long? QuotationId { get; set; }

        [JsonProperty("operator_id")]
        public long OperatorId { get; set; }

        [JsonProperty("product_name")]
        public string  ProductName { get; set; }

        [JsonProperty("product_desc")]
        public string ProductDesc { get; set; }

        [JsonProperty("stock_code")]
        public object StockCode { get; set; }

        [JsonProperty("trial_test_code")]
        public object TrialTestCode { get; set; }

        [JsonProperty("creator")]
        public Creator Creator { get; set; }

        [JsonProperty("unit_price_sale")]
        public double UnitPriceSale { get; set; }

        [JsonProperty("product_type_path")]
        public string  ProductTypePath { get; set; }

        [JsonProperty("product_config_id")]
        public long ProductConfigId { get; set; }

        [JsonProperty("unit_price_manager")]
        public double UnitPriceManager { get; set; }

        [JsonProperty("quotation_approval_status")]
        public long? QuotationApprovalStatus { get; set; }

        [JsonProperty("part_price_manager")]
        public double PartPriceManager { get; set; }

        [JsonProperty("quotation_status")]
        public long? QuotationStatus { get; set; }

        [JsonProperty("part_price_public")]
        public double PartPricePublic { get; set; }

        [JsonProperty("operator_name")]
        public string OperatorName { get; set; }

        [JsonProperty("part_price_company")]
        public double PartPriceCompany { get; set; }

        [JsonProperty("stock_approval_status")]
        public object StockApprovalStatus { get; set; }

        [JsonProperty("part_price_sale")]
        public double PartPriceSale { get; set; }

        [JsonProperty("service_price_manager")]
        public long ServicePriceManager { get; set; }

        [JsonProperty("trial_test_approval_status")]
        public object TrialTestApprovalStatus { get; set; }

        [JsonProperty("stock_id")]
        public object StockId { get; set; }

        [JsonProperty("trial_test_current_approval_user_name")]
        public string TrialTestCurrentApprovalUserName { get; set; }

        [JsonProperty("trial_test_approval_id")]
        public object TrialTestApprovalId { get; set; }

        [JsonProperty("operator")]
        public Creator Operator { get; set; }

        [JsonProperty("service_price_sale")]
        public long ServicePriceSale { get; set; }

        [JsonProperty("is_deleted")]
        public long IsDeleted { get; set; }

        [JsonProperty("discounted_unit_price")]
        public double DiscountedUnitPrice { get; set; }

        [JsonProperty("quotation_approval_id")]
        public string QuotationApprovalId { get; set; }

        [JsonProperty("trial_test_quantity")]
        public object TrialTestQuantity { get; set; }

        [JsonProperty("owner_id")]
        public long OwnerId { get; set; }

        [JsonProperty("product_config_code")]
        public string ProductConfigCode { get; set; }
    }

    public partial class Creator
    {
        [JsonProperty("user_name")]
        public string  UserName { get; set; }

        [JsonProperty("user_id")]
        public long UserId { get; set; }
    }

    public enum RName { Empty, 陈敬熙 };

    public enum ProductName { R5210G10Ia521, R5210G11Ib521 };

    public enum ProductPlatformId { Ia521, Ib521 };

    public enum ProductTypeName { 通用服务器 };

    public enum ProductTypePath { The11 };

    public partial class Configlist
    {
        public static Configlist FromJson(string json) => JsonConvert.DeserializeObject<Configlist>(json, QT_configlist.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Configlist self) => JsonConvert.SerializeObject(self, QT_configlist.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RNameConverter.Singleton,
                ProductNameConverter.Singleton,
                ProductPlatformIdConverter.Singleton,
                ProductTypeNameConverter.Singleton,
                ProductTypePathConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RName) || t == typeof(RName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return RName.Empty;
                case "陈敬熙":
                    return RName.陈敬熙;
            }
            throw new Exception("Cannot unmarshal type RName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RName)untypedValue;
            switch (value)
            {
                case RName.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case RName.陈敬熙:
                    serializer.Serialize(writer, "陈敬熙");
                    return;
            }
            throw new Exception("Cannot marshal type RName");
        }

        public static readonly RNameConverter Singleton = new RNameConverter();
    }

    internal class ProductNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductName) || t == typeof(ProductName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "R5210 G10 (IA521)":
                    return ProductName.R5210G10Ia521;
                case "R5210 G11 (IB521)":
                    return ProductName.R5210G11Ib521;
            }
            throw new Exception("Cannot unmarshal type ProductName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductName)untypedValue;
            switch (value)
            {
                case ProductName.R5210G10Ia521:
                    serializer.Serialize(writer, "R5210 G10 (IA521)");
                    return;
                case ProductName.R5210G11Ib521:
                    serializer.Serialize(writer, "R5210 G11 (IB521)");
                    return;
            }
            throw new Exception("Cannot marshal type ProductName");
        }

        public static readonly ProductNameConverter Singleton = new ProductNameConverter();
    }

    internal class ProductPlatformIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductPlatformId) || t == typeof(ProductPlatformId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "IA521":
                    return ProductPlatformId.Ia521;
                case "IB521":
                    return ProductPlatformId.Ib521;
            }
            throw new Exception("Cannot unmarshal type ProductPlatformId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductPlatformId)untypedValue;
            switch (value)
            {
                case ProductPlatformId.Ia521:
                    serializer.Serialize(writer, "IA521");
                    return;
                case ProductPlatformId.Ib521:
                    serializer.Serialize(writer, "IB521");
                    return;
            }
            throw new Exception("Cannot marshal type ProductPlatformId");
        }

        public static readonly ProductPlatformIdConverter Singleton = new ProductPlatformIdConverter();
    }

    internal class ProductTypeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductTypeName) || t == typeof(ProductTypeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "通用服务器")
            {
                return ProductTypeName.通用服务器;
            }
            throw new Exception("Cannot unmarshal type ProductTypeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductTypeName)untypedValue;
            if (value == ProductTypeName.通用服务器)
            {
                serializer.Serialize(writer, "通用服务器");
                return;
            }
            throw new Exception("Cannot marshal type ProductTypeName");
        }

        public static readonly ProductTypeNameConverter Singleton = new ProductTypeNameConverter();
    }

    internal class ProductTypePathConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductTypePath) || t == typeof(ProductTypePath?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "/-1/1/")
            {
                return ProductTypePath.The11;
            }
            throw new Exception("Cannot unmarshal type ProductTypePath");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductTypePath)untypedValue;
            if (value == ProductTypePath.The11)
            {
                serializer.Serialize(writer, "/-1/1/");
                return;
            }
            throw new Exception("Cannot marshal type ProductTypePath");
        }

        public static readonly ProductTypePathConverter Singleton = new ProductTypePathConverter();
    }
}
