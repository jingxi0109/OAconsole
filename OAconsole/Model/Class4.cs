// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QT_logon;
//
//    var logon = Logon.FromJson(jsonString);

namespace QT_logon
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Logon
    {
        [JsonProperty("result")]
        public string Result { get; set; }

        [JsonProperty("token")]
        public string Token { get; set; }

        [JsonProperty("resultType")]
        public string ResultType { get; set; }

        [JsonProperty("resultMessage")]
        public object ResultMessage { get; set; }
    }

    public partial class Logon
    {
        public static Logon FromJson(string json) => JsonConvert.DeserializeObject<Logon>(json, QT_logon.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Logon self) => JsonConvert.SerializeObject(self, QT_logon.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
